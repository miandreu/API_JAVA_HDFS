[
{
  "pk": 50087, 
  "model": "desktop.document2", 
  "fields": {
    "uuid": "bb87641f-aa25-4e08-a52b-f82537a4d24a", 
    "extra": "", 
    "type": "notebook", 
    "description": "Convert a small dataset into a csv readable by Solr and index it", 
    "tags": [], 
    "is_history": false, 
    "last_modified": "2015-06-29T16:13:24.138", 
    "version": 1, 
    "owner": [
      "romain"
    ], 
    "dependencies": [], 
    "data": "{\"description\": \"Convert a small dataset into a csv readable by Solr and index it\", \"sessions\": [{\"type\": \"python\", \"id\": 0}], \"name\": \"San Francisco Weather Data cleanup\", \"selectedSnippet\": \"python\", \"id\": 50087, \"snippets\": [{\"chartSorting\": \"none\", \"editorKlass\": \"editor span12\", \"errorsKlass\": \"results python alert alert-error\", \"variables\": [], \"chartYMulti\": [], \"showChart\": false, \"showGrid\": true, \"isLoading\": false, \"id\": \"a8ea9645-9e1e-4e3b-eada-9b3155aa75be\", \"size\": 12, \"codeVisible\": true, \"isLeftPanelVisible\": false, \"chartData\": [], \"statement_raw\": \"import os\\n\\nfrom datetime import datetime\\n\\n\\ndata = sc.textFile(\\\"/user/romain/bikes/201408_weather_data.csv\\\")\\n\\nprint 'Number of records: ' + str(data.count())\\n\\nprint '\\\\nFirst ten records:'\\nfor row in data.take(10):\\n  print row\\n\\n\\n\\n\", \"showLogs\": false, \"statement\": \"import os\\n\\nfrom datetime import datetime\\n\\n\\ndata = sc.textFile(\\\"/user/romain/bikes/201408_weather_data.csv\\\")\\n\\nprint 'Number of records: ' + str(data.count())\\n\\nprint '\\\\nFirst ten records:'\\nfor row in data.take(10):\\n  print row\\n\\n\\n\\n\", \"codemirrorSize\": 185, \"editorMode\": \"text/x-python\", \"progress\": 0, \"type\": \"python\", \"status\": \"failed\", \"variableNames\": [], \"resultsKlass\": \"results python\", \"offset\": 0, \"chartType\": \"bars\", \"tempChartOptions\": {}, \"properties\": {}, \"name\": \"Read a file from HDFS\", \"klass\": \"snippet card card-widget\", \"checkStatusTimeout\": null, \"result\": {\"cleanedNumericMeta\": [], \"cleanedDateTimeMeta\": [], \"handle\": {\"has_result_set\": true, \"id\": 0}, \"logs\": \"\", \"executionTime\": 0, \"data\": [], \"fetchedOnce\": false, \"cleanedMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"cleanedStringMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"logLines\": 0, \"hasResultset\": true, \"meta\": [{\"comment\": null, \"type\": \"INT_TYPE\", \"name\": \"\"}, {\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"startTime\": \"2015-06-26T23:07:37.610Z\", \"hasSomeResults\": false, \"errors\": \"\", \"endTime\": \"2015-06-26T23:07:37.610Z\", \"type\": \"text\", \"id\": \"a335bf2a-ccf2-7093-c98c-012073337239\"}}, {\"chartSorting\": \"none\", \"editorKlass\": \"editor span12\", \"errorsKlass\": \"results python alert alert-error\", \"variables\": [], \"chartYMulti\": [], \"showChart\": false, \"showGrid\": true, \"isLoading\": false, \"id\": \"1bb59774-d377-90cc-39d5-3f5c7171b5fc\", \"size\": 12, \"codeVisible\": true, \"isLeftPanelVisible\": false, \"chartData\": [], \"statement_raw\": \"headers = data.first()\\n\\nprint 'Raw headers:\\\\n%s' % headers\\n\\n\\nheaders_names = [header.replace(' ', '') for header in headers.split(',')]\\n\\nprint '\\\\nCleaned headers:\\\\n%s' % headers_names\\n\", \"showLogs\": false, \"statement\": \"headers = data.first()\\n\\nprint 'Raw headers:\\\\n%s' % headers\\n\\n\\nheaders_names = [header.replace(' ', '') for header in headers.split(',')]\\n\\nprint '\\\\nCleaned headers:\\\\n%s' % headers_names\\n\", \"codemirrorSize\": 139.26129150390625, \"editorMode\": \"text/x-python\", \"progress\": 0, \"type\": \"python\", \"status\": \"ready\", \"variableNames\": [], \"resultsKlass\": \"results python\", \"offset\": 0, \"chartType\": \"bars\", \"tempChartOptions\": {}, \"properties\": {}, \"name\": \"Cleanup the headers in Python\", \"klass\": \"snippet card card-widget\", \"checkStatusTimeout\": null, \"result\": {\"cleanedNumericMeta\": [], \"cleanedDateTimeMeta\": [], \"handle\": {\"has_result_set\": true, \"id\": 1}, \"logs\": \"\", \"executionTime\": 0, \"data\": [], \"fetchedOnce\": false, \"cleanedMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"cleanedStringMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"logLines\": 0, \"hasResultset\": true, \"meta\": [{\"comment\": null, \"type\": \"INT_TYPE\", \"name\": \"\"}, {\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"startTime\": \"2015-06-11T21:09:00.475Z\", \"hasSomeResults\": false, \"errors\": \"\", \"endTime\": \"2015-06-11T21:09:00.475Z\", \"type\": \"text\", \"id\": \"397d13c7-f953-d91a-a9c3-7f84116c277d\"}}, {\"chartSorting\": \"none\", \"editorKlass\": \"editor span12\", \"errorsKlass\": \"results python alert alert-error\", \"variables\": [], \"chartYMulti\": [], \"showChart\": false, \"showGrid\": true, \"isLoading\": false, \"id\": \"f1380c60-d39d-dedd-6b2d-98a618d0b35f\", \"size\": 12, \"codeVisible\": true, \"isLeftPanelVisible\": false, \"chartData\": [], \"statement_raw\": \"import re\\n\\n\\ndef guess_type(cell):\\n  if re.match('\\\\d+\\\\.\\\\d+', cell):\\n    return '_f'\\n  elif re.match('\\\\d/\\\\d/\\\\d\\\\d\\\\d\\\\d', cell):\\n    return '_tdt'\\n  elif re.match('\\\\d+', cell):\\n    return '_i'\\n  else:\\n    return '_s'\\n\\n# We guess the type from the first row of data\\nheaders_types = [guess_type(cell) for cell in data.take(2)[1].split(',')]\\nheaders = [''.join(h) for h in zip(headers_names, headers_types)]\\n\\n\\nheaders = ','.join(headers)\\n\\nprint 'Unified headers:\\\\n%s' % headers\\n\", \"showLogs\": false, \"statement\": \"import re\\n\\n\\ndef guess_type(cell):\\n  if re.match('\\\\d+\\\\.\\\\d+', cell):\\n    return '_f'\\n  elif re.match('\\\\d/\\\\d/\\\\d\\\\d\\\\d\\\\d', cell):\\n    return '_tdt'\\n  elif re.match('\\\\d+', cell):\\n    return '_i'\\n  else:\\n    return '_s'\\n\\n# We guess the type from the first row of data\\nheaders_types = [guess_type(cell) for cell in data.take(2)[1].split(',')]\\nheaders = [''.join(h) for h in zip(headers_names, headers_types)]\\n\\n\\nheaders = ','.join(headers)\\n\\nprint 'Unified headers:\\\\n%s' % headers\\n\", \"codemirrorSize\": 291.47162354682087, \"editorMode\": \"text/x-python\", \"progress\": 0, \"type\": \"python\", \"status\": \"ready\", \"variableNames\": [], \"resultsKlass\": \"results python\", \"offset\": 0, \"chartType\": \"bars\", \"tempChartOptions\": {}, \"properties\": {}, \"name\": \"Add the Solr type to each field name of the headers\", \"klass\": \"snippet card card-widget\", \"checkStatusTimeout\": null, \"result\": {\"cleanedNumericMeta\": [], \"cleanedDateTimeMeta\": [], \"handle\": {\"has_result_set\": true, \"id\": 2}, \"logs\": \"\", \"executionTime\": 1, \"data\": [], \"fetchedOnce\": false, \"cleanedMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"cleanedStringMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"logLines\": 0, \"hasResultset\": true, \"meta\": [{\"comment\": null, \"type\": \"INT_TYPE\", \"name\": \"\"}, {\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"startTime\": \"2015-06-11T21:09:00.476Z\", \"hasSomeResults\": false, \"errors\": \"\", \"endTime\": \"2015-06-11T21:09:00.477Z\", \"type\": \"text\", \"id\": \"13a5c03f-da79-2ae1-2ec9-1c2aa2eb4ab9\"}}, {\"chartSorting\": \"none\", \"editorKlass\": \"editor span12\", \"errorsKlass\": \"results python alert alert-error\", \"variables\": [], \"chartYMulti\": [], \"showChart\": false, \"showGrid\": true, \"isLoading\": false, \"id\": \"47c9f0b1-e5cd-0e4d-724f-bbe160204170\", \"size\": 12, \"codeVisible\": true, \"isLeftPanelVisible\": false, \"chartData\": [], \"statement_raw\": \"def clean_row(row):\\n  cols = row.split(',')\\n\\n  date = datetime.strptime(cols[0], '%m/%d/%Y')\\n  cols[0] = date.strftime('%Y-%m-%dT%H:%M:%SZ') \\n\\n  if cols[-5] == 'T':\\n    cols[-5] = '0'\\n\\n  return ','.join(cols)\\n\\n\\n# Skip the header row and apply the cleaning function\\nrecords = data.filter(lambda row: not row.startswith('PDT')).map(clean_row)\\n\\n\\nprint 'First ten records with data normalized:'\\n\\nfor row in records.take(10):\\n  print row\\n\\n\", \"showLogs\": false, \"statement\": \"def clean_row(row):\\n  cols = row.split(',')\\n\\n  date = datetime.strptime(cols[0], '%m/%d/%Y')\\n  cols[0] = date.strftime('%Y-%m-%dT%H:%M:%SZ') \\n\\n  if cols[-5] == 'T':\\n    cols[-5] = '0'\\n\\n  return ','.join(cols)\\n\\n\\n# Skip the header row and apply the cleaning function\\nrecords = data.filter(lambda row: not row.startswith('PDT')).map(clean_row)\\n\\n\\nprint 'First ten records with data normalized:'\\n\\nfor row in records.take(10):\\n  print row\\n\\n\", \"codemirrorSize\": 290.4574106468639, \"editorMode\": \"text/x-python\", \"progress\": 0, \"type\": \"python\", \"status\": \"ready\", \"variableNames\": [], \"resultsKlass\": \"results python\", \"offset\": 0, \"chartType\": \"bars\", \"tempChartOptions\": {}, \"properties\": {}, \"name\": \"Convert the data format to Solr format\", \"klass\": \"snippet card card-widget\", \"checkStatusTimeout\": null, \"result\": {\"cleanedNumericMeta\": [], \"cleanedDateTimeMeta\": [], \"handle\": {\"has_result_set\": true, \"id\": 3}, \"logs\": \"\", \"executionTime\": 0, \"data\": [], \"fetchedOnce\": false, \"cleanedMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"cleanedStringMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"logLines\": 0, \"hasResultset\": true, \"meta\": [{\"comment\": null, \"type\": \"INT_TYPE\", \"name\": \"\"}, {\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"startTime\": \"2015-06-11T21:09:00.477Z\", \"hasSomeResults\": false, \"errors\": \"\", \"endTime\": \"2015-06-11T21:09:00.477Z\", \"type\": \"text\", \"id\": \"d8920cbc-1c5d-a177-f2ef-e91d5b4bfc5c\"}}, {\"chartSorting\": \"none\", \"editorKlass\": \"editor span12\", \"errorsKlass\": \"results python alert alert-error\", \"variables\": [], \"chartYMulti\": [], \"showChart\": false, \"showGrid\": true, \"isLoading\": false, \"id\": \"1adbab9a-df8f-58a7-ff43-192d65900acd\", \"size\": 12, \"codeVisible\": true, \"isLeftPanelVisible\": false, \"chartData\": [], \"statement_raw\": \"csv = headers + '\\\\n' + records.reduce(lambda a, b: a + '\\\\n' + b)\\n\\n\\nprint 'Beginning of csv data:\\\\n%s' % csv[:1000]\\n\", \"showLogs\": false, \"statement\": \"csv = headers + '\\\\n' + records.reduce(lambda a, b: a + '\\\\n' + b)\\n\\n\\nprint 'Beginning of csv data:\\\\n%s' % csv[:1000]\\n\", \"codemirrorSize\": 102.46592843631015, \"editorMode\": \"text/x-python\", \"progress\": 0, \"type\": \"python\", \"status\": \"ready\", \"variableNames\": [], \"resultsKlass\": \"results python\", \"offset\": 0, \"chartType\": \"bars\", \"tempChartOptions\": {}, \"properties\": {}, \"name\": \"Concatenate all the rows into one text\", \"klass\": \"snippet card card-widget\", \"checkStatusTimeout\": null, \"result\": {\"cleanedNumericMeta\": [], \"cleanedDateTimeMeta\": [], \"handle\": {\"has_result_set\": true, \"id\": 4}, \"logs\": \"\", \"executionTime\": 0, \"data\": [], \"fetchedOnce\": false, \"cleanedMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"cleanedStringMeta\": [{\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"logLines\": 0, \"hasResultset\": true, \"meta\": [{\"comment\": null, \"type\": \"INT_TYPE\", \"name\": \"\"}, {\"comment\": \"\", \"type\": \"STRING_TYPE\", \"name\": \"Header\"}], \"startTime\": \"2015-06-11T21:09:00.477Z\", \"hasSomeResults\": false, \"errors\": \"\", \"endTime\": \"2015-06-11T21:09:00.477Z\", \"type\": \"text\", \"id\": \"ce0773fa-6a1a-d314-47c8-c202fc9b21f9\"}}, {\"chartSorting\": \"none\", \"editorKlass\": \"editor span12\", \"errorsKlass\": \"results python alert alert-error\", \"variables\": [], \"chartYMulti\": [], \"showChart\": false, \"showGrid\": true, \"isLoading\": false, \"id\": \"4beac2bd-7018-efe3-4460-e33ff1e1b332\", \"size\": 12, \"codeVisible\": true, \"isLeftPanelVisible\": false, \"chartData\": [], \"statement_raw\": \"import urllib2\\n\\n\\nreq = urllib2.Request('http://localhost:8983/solr/baybikes/update?commitWithin=5000')\\nreq.add_header('Content-Type', 'text/csv')\\n\\nresponse = urllib2.urlopen(req, csv)\\n\\n\\nprint 'Done!'\\n\", \"showLogs\": false, \"statement\": \"import urllib2\\n\\n\\nreq = urllib2.Request('http://localhost:8983/solr/baybikes/update?commitWithin=5000')\\nreq.add_header('Content-Type', 'text/csv')\\n\\nresponse = urllib2.urlopen(req, csv)\\n\\n\\nprint 'Done!'\\n\", \"codemirrorSize\": 276.4545188186578, \"editorMode\": \"text/x-python\", \"progress\": 0, \"type\": \"python\", \"status\": \"ready\", \"variableNames\": [], \"resultsKlass\": \"results python\", \"offset\": 0, \"chartType\": \"bars\", \"tempChartOptions\": {}, \"properties\": {}, \"name\": \"Directly index the data to Solr which will index it in the weather collection\", \"klass\": \"snippet card card-widget\", \"checkStatusTimeout\": null, \"result\": {\"cleanedNumericMeta\": [], \"cleanedDateTimeMeta\": [], \"handle\": {}, \"logs\": \"\", \"executionTime\": 0, \"data\": [], \"fetchedOnce\": false, \"cleanedMeta\": [], \"cleanedStringMeta\": [], \"logLines\": 0, \"hasResultset\": true, \"meta\": [], \"startTime\": \"2015-06-11T21:09:00.477Z\", \"hasSomeResults\": false, \"errors\": \"\", \"endTime\": \"2015-06-11T21:09:00.477Z\", \"type\": \"table\", \"id\": \"ee07624e-d300-c50b-e6c6-83499edb4838\"}}], \"uuid\": \"21e3c635-b218-4cd7-ff61-56d1ba106ac2\"}", 
    "name": "San Francisco Weather Data cleanup"
  }
}
]
